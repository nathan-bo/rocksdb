name: Release

on:
  workflow_dispatch:

jobs:
  
  Release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: verify build
            command: cmake ..  -GNinja
          - name: optimized build
            command: cmake .. -DCMAKE_BUILD_TYPE=Release  -GNinja
          - mame: clang build
            command: CC=clang CXX=clang++ cmake ..  -GNinja
    container:
      image: alpine:3.14

    steps:
    - name: Pre-build
      run: |
        env
        rm -rf /usr/share/dotnet || echo ""
        df -h
        apk add git bash python3 py3-pip clang clang-extra-tools shellcheck gcc g++ cmake ninja ccache \
        openjdk10 gflags-dev snappy-dev lz4-dev bzip2-dev zstd-dev zlib-dev linux-headers openssh-client tar
        python3 -m pip install lint-diffs flake8
    - name: Checkout
      uses: actions/checkout@v2 
      
      
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
        
        
    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{runner.os}}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
        restore-keys: |
          ${{runner.os}}-ccache-
        
      
    - name: ${{ matrix.name }}
      run: |
        df -h
        ls /etc/apk/world
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git pull
        if [ -d "$GITHUB_WORKSPACE/build" ]; then
          echo >&2 "error: the build directory should not exist" && false NIK 
        fi
        if [ -d "~/.ccache" ]; then
          echo "Already exists"
        else
          mkdir -p ~/.ccache
          ls ~ | grep cache || echo ""
          touch ~/.ccache/ccache.txt
          echo "aaa" > ~/.ccache/ccache.txt
          ls ~/.ccache
          cat ~/.ccache/ccache.txt
        fi
        mkdir -p "$GITHUB_WORKSPACE/build"
        cd "$GITHUB_WORKSPACE/build"
        export "CCACHE_BASEDIR=$HOME"
        export "CCACHE_DIR=$HOME/.ccache"
        export "CCACHE_COMPILERCHECK=content"
        ${{ matrix.command }} -DWITH_GFLAGS=1 \
        -DWITH_ZLIB=1 -DWITH_SNAPPY=1 -DWITH_BZ2=1 -DWITH_LZ4=1 -DWITH_ZSTD=1 \
        -DWITH_JNI=1 -DJAVA_HOME=/usr/lib/jvm/default-jvm \
        -DWITH_BENCHMARK_TOOLS=1 -DWITH_CORE_TOOLS=1 -DWITH_TOOLS=1 \
        -DWITH_TESTS=1 -DWITH_ALL_TESTS=1 -DWITH_EXAMPLES=1
        ninja
        
    - name: run unit-test
      run: echo "~~~ Running unit-test ~~~"

    - name: run perf-test 
      run: echo "~~~ Running e2e-test ~~~"
  
  Sanity:
    uses: speedb-io/speedb/.github/workflows/sanity_check.yml@main

  Fuzz:
    needs: [Release]
    uses: speedb-io/speedb/.github/workflows/test_fuzz.yml@main
      

  UpdateVer:
    needs: [Sanity, Fuzz]
    runs-on: ubuntu-latest
    steps:
    
    - name: Update version.h
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git pull
        if [ $GITHUB_REF_NAME =~ "release/*)" ]; then
          major=$(cat $GITHUB_WORKSPACE/include/rocksdb/version.h | grep '#define ROCKSDB_MAJOR' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          minor=$(cat $GITHUB_WORKSPACE/include/rocksdb/version.h | grep '#define ROCKSDB_MINOR' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          patch=$(cat $GITHUB_WORKSPACE/include/rocksdb/version.h | grep '#define ROCKSDB_PATCH' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          new_patch=$(echo $patch + 1 | bc)
          sed -i -e "s/#define ROCKSDB_PATCH.*/#define ROCKSDB_PATCH $new_patch/g" include/rocksdb/version.h
          git commit -am "updated version.h version"
          git push
          git tag "v${{ env.major }}.${{ env.minor }}.$new_patch"
          git push --tags
        elif [ $GITHUB_REF_NAME =~ "feature/*" ] | [ $GITHUB_REF_NAME =~ "main" ]; then
          major=$(cat $GITHUB_WORKSPACE/include/rocksdb/version.h | grep '#define ROCKSDB_MAJOR' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          minor=$(cat $GITHUB_WORKSPACE/include/rocksdb/version.h | grep '#define ROCKSDB_MINOR' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          patch=$(cat $GITHUB_WORKSPACE/include/rocksdb/version.h | grep '#define ROCKSDB_PATCH' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          new_patch=$(echo $patch + 1 | bc)
          sed -i -e "s/#define ROCKSDB_PATCH.*/#define ROCKSDB_PATCH $new_patch/g" include/rocksdb/version.h
          sed -i -e "s/#define ROCKSDB_BRANCH.*/#define ROCKSDB_BRANCH $GITHUB_REF_NAME/g" include/rocksdb/version.h
          git commit -am "updated version.h version"
          git push
          git tag "v${{ env.major }}.${{ env.minor }}.$new_patch-$GITHUB_REF_NAME"
          git push --tags
        fi

        
          
