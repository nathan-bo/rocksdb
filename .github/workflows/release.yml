name: Release

on:
  push:
    branches: [ release/* ]
  workflow_dispatch:

jobs:
  
  Release:
    runs-on: ubuntu-latest
    container:
      image: alpine:3.14


    steps:
        
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Verify Branch
        run: |
          env
          echo "~~~~ Verifying Branch ~~~~"

          if [[ $GITHUB_REF_NAME =~ release/.* ]]; then
            echo "MATCH"
          else
            echo "No Match"
          fi
          echo "~~~~ Verifying Branch ~~~~"
      
      - name: Calculate new tag
        run:  echo "~~~~ Calculating New Tag ~~~~"
      
      - name: Update version.h
        run:  echo "~~~~ Updating version.h ~~~~"
      
      - name: Pre-build
        run: |
          apk add git python3 py3-pip clang clang-extra-tools shellcheck gcc g++ cmake ninja ccache \
          openjdk10 gflags-dev snappy-dev lz4-dev bzip2-dev zstd-dev zlib-dev linux-headers openssh-client
          apk add --no-cache tar
          python3 -m pip install lint-diffs flake8
      
      - name: Verify Build
        run: |
          echo "~~~~ Running verify build ~~~~"
          
          if [ -d "$GITHUB_WORKSPACE/build" ]; then
            echo >&2 "error: the build directory should not exist" && false NIK 
          fi
          mkdir -p "$GITHUB_WORKSPACE/build"
          cd "$GITHUB_WORKSPACE/build"
          export "CCACHE_BASEDIR=$GITHUB_WORKSPACE"
          export "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache"
          export "CCACHE_COMPILERCHECK=content"
          
          cmake .. -GNinja -DWITH_GFLAGS=1 \
          -DWITH_ZLIB=1 -DWITH_SNAPPY=1 -DWITH_BZ2=1 -DWITH_LZ4=1 -DWITH_ZSTD=1 \
          -DWITH_JNI=1 -DJAVA_HOME=/usr/lib/jvm/default-jvm \
          -DWITH_BENCHMARK_TOOLS=1 -DWITH_CORE_TOOLS=1 -DWITH_TOOLS=1 \
          -DWITH_TESTS=1 -DWITH_ALL_TESTS=1 -DWITH_EXAMPLES=1
          
          ninja
          
          
      - name: Optimized Build
        run: |
          echo "~~~~ Running Optimized Build ~~~~"

          if [ -d "$GITHUB_WORKSPACE/build" ]; then
            rm -rf $GITHUB_WORKSPACE/build
          fi
          mkdir -p "$GITHUB_WORKSPACE/build"
          cd "$GITHUB_WORKSPACE/build"
          export "CCACHE_BASEDIR=$GITHUB_WORKSPACE"
          export "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache"
          export "CCACHE_COMPILERCHECK=content"

          cmake .. -DCMAKE_BUILD_TYPE=Release -GNinja -DWITH_GFLAGS=1 \
          -DWITH_ZLIB=1 -DWITH_SNAPPY=1 -DWITH_BZ2=1 -DWITH_LZ4=1 -DWITH_ZSTD=1 \
          -DWITH_JNI=1 -DJAVA_HOME=/usr/lib/jvm/default-jvm \
          -DWITH_BENCHMARK_TOOLS=1 -DWITH_CORE_TOOLS=1 -DWITH_TOOLS=1 \
          -DWITH_TESTS=1 -DWITH_ALL_TESTS=1 -DWITH_EXAMPLES=1

          ninja
          
      - name: Clang Build
        run: |

          echo "~~~~ Running clang build ~~~~"
          
          if [ -d "$GITHUB_WORKSPACE/build" ]; then
            rm -rf $GITHUB_WORKSPACE/build
          fi
          
          mkdir -p "$GITHUB_WORKSPACE/build"
          cd "$GITHUB_WORKSPACE/build"
          export "CCACHE_BASEDIR=$GITHUB_WORKSPACE"
          export "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache"
          export "CCACHE_COMPILERCHECK=content"
          
          CC=clang CXX=clang++ cmake .. -GNinja -DWITH_GFLAGS=1 \
          -DWITH_ZLIB=1 -DWITH_SNAPPY=1 -DWITH_BZ2=1 -DWITH_LZ4=1 -DWITH_ZSTD=1 \
          -DWITH_JNI=1 -DJAVA_HOME=/usr/lib/jvm/default-jvm \
          -DWITH_BENCHMARK_TOOLS=1 -DWITH_CORE_TOOLS=1 -DWITH_TOOLS=1 \
          -DWITH_TESTS=1 -DWITH_ALL_TESTS=1 -DWITH_EXAMPLES=1
          
          ninja
          
      - name: Test
        run:  echo "~~~~ Running Tests ~~~~"
      
      - name: Publish
        run:  echo "~~~~ Publishing ~~~~"
      
      - name: Git Reset
        run:  echo "~~~~ Resetting Git ~~~~"
      
      - name: Git Tag
        run:  echo "~~~~ Tagging ~~~~"
      
      - name: Git Push tag
        run:  echo "~~~~ Pushing Tag ~~~~"
